#ifndef _pkt_H
#define _pkt_H

#include <CppUTest/CommandLineTestRunner.h>
#include <CppUTest/TestHarness_c.h>

#include <linux/types.h>
// #include <linux/if_packet.h>
#include <linux/if_ether.h>
#include <linux/in.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <stdbool.h>

#include "../lib/bpf_endian.h"

#pragma GCC diagnostic ignored "-Wpointer-arith"
#pragma GCC diagnostic ignored "-Wconversion-null"

#define printk(fmt, ...) ({ printf(fmt, ##__VA_ARGS__); printf("\n"); })
#define __bpf_memcpy memcpy
#define BPF_INLINE 

#define IP_BEGIN 14
#define TCP_BEGIN 14 + 20
#define HTTP_BEGIN 14 + 20 + 20
#define pkt_END 131

struct pkthdr {
    struct ethhdr* eth;
    struct iphdr* ipv4;
    struct tcphdr* tcp;

    void* data_begin;
    void* data_end;
    void* data_cursor;
};

// GET / www.baidu.com
static __u8 data_req[pkt_END] = { 
    0x00, 0x15, 0x5d, 0x71, 0xc9, 0xe1, 0x00, 0x15, 0x5d, 0xb1, 0x37, 0xf1, 0x08, 0x00, // eth
    0x45, 0x00, 0x00, 0x75, 0x9b, 0x7d, 0x40, 0x00, 0x40, 0x06, 
    0x47, 0x20, 0xac, 0x19, 0xa8, 0x81, 0xdc, 0xb5, 0x26, 0x95, // ip
    0xaa, 0xdc, 0x00, 0x50, 0xda, 0x84, 0x96, 0x60, 0x11, 0xd3, 
    0xef, 0x67, 0x50, 0x18, 0x01, 0xff, 0x58, 0x4d, 0x00, 0x00, // tcp
    0x47, 0x45, 0x54, 0x20, 0x2f, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, //GET / HTTP/1.0\r\n\r\n
    0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x77, 0x77, 0x77, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e,
    0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 
    0x20, 0x63, 0x75, 0x72, 0x6c, 0x2f, 0x37, 0x2e, 0x37, 0x34, 0x2e, 0x30, 0x0d, 0x0a, 0x41, 0x63, 
    0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x2a, 0x2f, 0x2a, 0x0d, 0x0a, 0x0d, 0x0a 
};

// response from baidu
// __u8 data_resp[503] = { 
//     0x00, 0x15, 0x5d, 0xb1, 0x37, 0xf1, 0x00, 0x15, 0x5d, 0x71, 0xc9, 0xe1, 0x08, 0x00, 0x45, 0x00,
//     0x01, 0xe9, 0x13, 0x8c, 0x40, 0x00, 0x2b, 0x06, 0xe2, 0x9d, 0xdc, 0xb5, 0x26, 0x95, 0xac, 0x19,
//     0xa8, 0x81, 0x00, 0x50, 0xaa, 0xdc, 0x11, 0xd3, 0xf8, 0x83, 0xda, 0x84, 0x96, 0xad, 0x50, 0x18,
//     0x09, 0x94, 0x7c, 0x0f, 0x00, 0x00, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0x3c, 0x2f, 0x61, 0x3e, 0x20,
//     0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x20, 0x3c, 0x2f,
//     0x64, 0x69, 0x76, 0x3e, 0x20, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x66, 0x74, 0x43,
//     0x6f, 0x6e, 0x3e, 0x20, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x66, 0x74, 0x43, 0x6f,
//     0x6e, 0x77, 0x3e, 0x20, 0x3c, 0x70, 0x20, 0x69, 0x64, 0x3d, 0x6c, 0x68, 0x3e, 0x20, 0x3c, 0x61,
//     0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6f, 0x6d,
//     0x65, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x3e, 0xe5, 0x85, 0xb3, 0xe4,
//     0xba, 0x8e, 0xe7, 0x99, 0xbe, 0xe5, 0xba, 0xa6, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x3c, 0x61, 0x20,
//     0x68, 0x72, 0x65, 0x66, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x72, 0x2e, 0x62,
//     0x61, 0x69, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x3e, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x42,
//     0x61, 0x69, 0x64, 0x75, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x3c, 0x2f, 0x70, 0x3e, 0x20, 0x3c, 0x70,
//     0x20, 0x69, 0x64, 0x3d, 0x63, 0x70, 0x3e, 0x26, 0x63, 0x6f, 0x70, 0x79, 0x3b, 0x32, 0x30, 0x31,
//     0x37, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x42, 0x61, 0x69, 0x64, 0x75, 0x26, 0x6e, 0x62, 0x73,
//     0x70, 0x3b, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
//     0x2f, 0x77, 0x77, 0x77, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
//     0x75, 0x74, 0x79, 0x2f, 0x3e, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x99, 0xbe, 0xe5, 0xba,
//     0xa6, 0xe5, 0x89, 0x8d, 0xe5, 0xbf, 0x85, 0xe8, 0xaf, 0xbb, 0x3c, 0x2f, 0x61, 0x3e, 0x26, 0x6e,
//     0x62, 0x73, 0x70, 0x3b, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x68, 0x74, 0x74,
//     0x70, 0x3a, 0x2f, 0x2f, 0x6a, 0x69, 0x61, 0x6e, 0x79, 0x69, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75,
//     0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x63, 0x70, 0x2d, 0x66,
//     0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x3e, 0xe6, 0x84, 0x8f, 0xe8, 0xa7, 0x81, 0xe5, 0x8f,
//     0x8d, 0xe9, 0xa6, 0x88, 0x3c, 0x2f, 0x61, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0xe4, 0xba,
//     0xac, 0x49, 0x43, 0x50, 0xe8, 0xaf, 0x81, 0x30, 0x33, 0x30, 0x31, 0x37, 0x33, 0xe5, 0x8f, 0xb7,
//     0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x20, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d,
//     0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
//     0x69, 0x6d, 0x67, 0x2f, 0x67, 0x73, 0x2e, 0x67, 0x69, 0x66, 0x3e, 0x20, 0x3c, 0x2f, 0x70, 0x3e,
//     0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x20, 0x3c,
//     0x2f, 0x64, 0x69, 0x76, 0x3e, 0x20, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x20, 0x3c, 0x2f,
//     0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0d, 0x0a
// };

static struct pkthdr pkt = { 
    .eth = (struct ethhdr*)(data_req + 0),
    .ipv4 = (struct iphdr*)(data_req + 14),
    .tcp = (struct tcphdr*)(data_req + 14 + 20),

    .data_begin = (void*)data_req,
    .data_end = (void*)(data_req) + 131,
    .data_cursor = (void*)data_req
};

#endif /* _pkt_H */
