// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadredirectHTTPS returns the embedded CollectionSpec for redirectHTTPS.
func loadredirectHTTPS() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_redirectHTTPSBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load redirectHTTPS: %w", err)
	}

	return spec, err
}

// loadredirectHTTPSObjects loads redirectHTTPS and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *redirectHTTPSObjects
//     *redirectHTTPSPrograms
//     *redirectHTTPSMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadredirectHTTPSObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadredirectHTTPS()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// redirectHTTPSSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type redirectHTTPSSpecs struct {
	redirectHTTPSProgramSpecs
	redirectHTTPSMapSpecs
}

// redirectHTTPSSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type redirectHTTPSProgramSpecs struct {
	XdpredirectHTTPSProg *ebpf.ProgramSpec `ebpf:"xdp_redirectHTTPS_prog"`
}

// redirectHTTPSMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type redirectHTTPSMapSpecs struct {
	METRICS_MAP         *ebpf.MapSpec `ebpf:"METRICS_MAP"`
	PKT_INFO_EVENTS_MAP *ebpf.MapSpec `ebpf:"PKT_INFO_EVENTS_MAP"`
	ConfigMap           *ebpf.MapSpec `ebpf:"config_map"`
}

// redirectHTTPSObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadredirectHTTPSObjects or ebpf.CollectionSpec.LoadAndAssign.
type redirectHTTPSObjects struct {
	redirectHTTPSPrograms
	redirectHTTPSMaps
}

func (o *redirectHTTPSObjects) Close() error {
	return _redirectHTTPSClose(
		&o.redirectHTTPSPrograms,
		&o.redirectHTTPSMaps,
	)
}

// redirectHTTPSMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadredirectHTTPSObjects or ebpf.CollectionSpec.LoadAndAssign.
type redirectHTTPSMaps struct {
	METRICS_MAP         *ebpf.Map `ebpf:"METRICS_MAP"`
	PKT_INFO_EVENTS_MAP *ebpf.Map `ebpf:"PKT_INFO_EVENTS_MAP"`
	ConfigMap           *ebpf.Map `ebpf:"config_map"`
}

func (m *redirectHTTPSMaps) Close() error {
	return _redirectHTTPSClose(
		m.METRICS_MAP,
		m.PKT_INFO_EVENTS_MAP,
		m.ConfigMap,
	)
}

// redirectHTTPSPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadredirectHTTPSObjects or ebpf.CollectionSpec.LoadAndAssign.
type redirectHTTPSPrograms struct {
	XdpredirectHTTPSProg *ebpf.Program `ebpf:"xdp_redirectHTTPS_prog"`
}

func (p *redirectHTTPSPrograms) Close() error {
	return _redirectHTTPSClose(
		p.XdpredirectHTTPSProg,
	)
}

func _redirectHTTPSClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed redirectHTTPS_bpfel.o
var _redirectHTTPSBytes []byte
